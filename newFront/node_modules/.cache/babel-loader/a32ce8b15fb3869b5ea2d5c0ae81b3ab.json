{"ast":null,"code":"import _slicedToArray from \"/Users/jacksonbooth/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jacksonbooth/frontend/src/quiz/quiz.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepButton from \"@material-ui/core/StepButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"./QuizCard.js\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: \"inline-block\"\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return [\"\", \"\", \"\", \"\"];\n}\n\nexport default function HorizontalNonLinearStepper() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(0),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        activeStep = _React$useState2[0],\n        setActiveStep = _React$useState2[1];\n\n  const _React$useState3 = React.useState({}),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        completed = _React$useState4[0],\n        setCompleted = _React$useState4[1];\n\n  const steps = getSteps();\n\n  function totalSteps() {\n    return steps.length;\n  }\n\n  function completedSteps() {\n    return Object.keys(completed).length;\n  }\n\n  function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  }\n\n  function allStepsCompleted() {\n    return completedSteps() === totalSteps();\n  }\n\n  function handleNext() {\n    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n    // find the first step that has been completed\n    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;\n    setActiveStep(newActiveStep);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  function handleComplete() {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n    setCompleted({});\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Stepper, {\n    nonLinear: true,\n    activeStep: activeStep,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, steps.map((label, index) => React.createElement(Step, {\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(StepButton, {\n    onClick: handleStep(index),\n    completed: completed[index],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, label)))), React.createElement(\"div\", {\n    style: {\n      marginBottom: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Card, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, allStepsCompleted() ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    className: classes.instructions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"All steps completed - you're finished\"), React.createElement(Button, {\n    onClick: handleReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Reset\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Button, {\n    disabled: activeStep === 0,\n    onClick: handleBack,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Back\"), React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleNext,\n    className: classes.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"Next\"), activeStep !== steps.length && (completed[activeStep] ? React.createElement(Typography, {\n    variant: \"caption\",\n    className: classes.completed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Step \", activeStep + 1, \" already completed\") : React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, completedSteps() === totalSteps() - 1 ? \"Finish\" : \"Complete Step\"))))));\n}","map":{"version":3,"sources":["/Users/jacksonbooth/frontend/src/quiz/quiz.js"],"names":["React","BrowserRouter","Router","Route","Link","makeStyles","Stepper","Step","StepButton","Button","Typography","Card","useStyles","theme","root","width","button","marginRight","spacing","completed","display","instructions","marginTop","marginBottom","getSteps","HorizontalNonLinearStepper","classes","useState","activeStep","setActiveStep","setCompleted","steps","totalSteps","length","completedSteps","Object","keys","isLastStep","allStepsCompleted","handleNext","newActiveStep","findIndex","step","i","handleBack","prevActiveStep","handleStep","handleComplete","newCompleted","handleReset","map","label","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepButton from \"@material-ui/core/StepButton\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"./QuizCard.js\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: \"inline-block\"\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nfunction getSteps() {\n  return [\"\", \"\", \"\", \"\"];\n}\n\nexport default function HorizontalNonLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [completed, setCompleted] = React.useState({});\n  const steps = getSteps();\n\n  function totalSteps() {\n    return steps.length;\n  }\n\n  function completedSteps() {\n    return Object.keys(completed).length;\n  }\n\n  function isLastStep() {\n    return activeStep === totalSteps() - 1;\n  }\n\n  function allStepsCompleted() {\n    return completedSteps() === totalSteps();\n  }\n\n  function handleNext() {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed,\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !(i in completed))\n        : activeStep + 1;\n    setActiveStep(newActiveStep);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  const handleStep = step => () => {\n    setActiveStep(step);\n  };\n\n  function handleComplete() {\n    const newCompleted = completed;\n    newCompleted[activeStep] = true;\n    setCompleted(newCompleted);\n    handleNext();\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n    setCompleted({});\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper nonLinear activeStep={activeStep}>\n        {steps.map((label, index) => (\n          <Step key={label}>\n            <StepButton\n              onClick={handleStep(index)}\n              completed={completed[index]}\n            >\n              {label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n      <div style={{ marginBottom: 30 }}>\n        <Card />\n      </div>\n      <div>\n        {allStepsCompleted() ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset}>Reset</Button>\n          </div>\n        ) : (\n          <div>\n            <div>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.button}\n              >\n                Back\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                Next\n              </Button>\n              {activeStep !== steps.length &&\n                (completed[activeStep] ? (\n                  <Typography variant=\"caption\" className={classes.completed}>\n                    Step {activeStep + 1} already completed\n                  </Typography>\n                ) : (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleComplete}\n                  >\n                    {completedSteps() === totalSteps() - 1\n                      ? \"Finish\"\n                      : \"Complete Step\"}\n                  </Button>\n                ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}